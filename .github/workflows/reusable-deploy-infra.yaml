# .github/workflows/reusable-deploy-infra.yaml
name: Reusable Deployment Workflow
run-name: Deploy Cognito Infrastructure to ${{ inputs.stage }}

on:
  workflow_call:
    inputs:
      environment:
        description: Name of the environment (e.g., development, testing, etc.)
        required: true
        type: string
      stage:
        description: Name of the stage (e.g., dev, tst, acc, prd)
        required: true
        type: string

jobs:
  get-application-version:
    name: Fetching version of application
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-application-version.outputs.tag }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Application Versions from pyproject.toml
        id: set-application-version
        run: |
          if [ ! -f "src/pyproject.toml" ]; then
            echo "::error ::src/pyproject.toml file not found in the current branch"
            exit 1
          fi
          application_version=$(grep "^version" src/pyproject.toml | head -n 1 | cut -d '"' -f 2)
          if [ -n "$application_version" ]; then
            echo "Using current version: $application_version"
            echo "tag=$(echo $application_version)" >> $GITHUB_OUTPUT
          else
            echo "::error ::application-version not provided or is empty"
            exit 1
          fi

  deploy:
    name: Deploy to ${{ inputs.stage }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: get-application-version
    if: needs.get-application-version.outputs.version != '[]' && !failure() && !cancelled()
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Caching
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-fde-backend-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-cache-fde-backend-

      - name: Authenticate with Artifactory NPM Virtual
        uses: Postnl-Production/lpe-private-actions/lpe-jfrog-npm-auth@v5
        with:
          npm-repo-name: postnl-data-lake-npm-dev-virtual
          oidc: true

      - name: Install Node.js modules and dependencies
        run: npm ci
        working-directory: infra/federated-engineers-portal

      - name: Configure AWS Credentials
        uses: Postnl-Production/lpe-private-actions/lpe-aws-deploy@v5
        with:
          target-account-id: ${{ secrets.AWS_ACCOUNT_ID }}
          deployment-account-id: ${{ secrets.DEPLOY_AWS_ACCOUNT }}
          deployment-role-name: lpe-oidc-${{ github.event.repository.name }}

      - name: CDK diff
        run: npx cdk diff --context stage=${{ inputs.stage }} --context image_tag=${{ needs.get-application-version.outputs.version }}
        working-directory: infra/federated-engineers-portal

      - name: CDK deployment
        run: |
          npx cdk deploy \
          --all \
          --context stage=${{ inputs.stage }} \
          --context image_tag=${{ needs.get-application-version.outputs.version }} \
          --method change-set \
          --require-approval never \
          --verbose
        working-directory: infra/federated-engineers-portal
