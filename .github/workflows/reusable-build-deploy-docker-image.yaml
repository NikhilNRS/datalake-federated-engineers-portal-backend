name: Build and deploy docker image to ECR

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Directory where the application is located'
        required: false
        default: '.'
        type: string
      environment:
        description: Name of the environment
        required: true
        type: string
      stage:
        description: Name of the stage
        required: true
        type: string

jobs:
  build-docker-image:
    name: Build Docker Image for ${{ inputs.environment }} environment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ inputs.working-directory }}

      - name: List files in current working directory
        run: |
          cd ${{ inputs.working-directory }}
          ls -la

      - name: Get application version
        run: |
          cd ${{ inputs.working-directory }}
          echo "Listing files before extracting version"
          ls -la  # Add ls to verify the pyproject.toml file location
          application_version=$(grep "^version" pyproject.toml | head -n 1 | cut -d '"' -f 2)
          if [ -z "$application_version" ]; then
            echo "::error ::Application version could not be found in pyproject.toml"
            exit 1
          fi
          echo "application_version=$application_version" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get temporary AWS credentials
        uses: Postnl-Production/lpe-private-actions/lpe-deploy-action@v3.1.1
        with:
          target-account: ${{ secrets.AWS_ACCOUNT_ID }}
          deploy-secret: ${{ secrets.G01738_LPE_GITHUB_HELPER }}

      - name: Configure AWS Credentials for ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build Docker image
        run: |
          cd ${{ inputs.working-directory }}
          docker build . -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/federated-engineers-portal-backend-${{ inputs.stage }}:$application_version

      - name: Upload Docker Image
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/federated-engineers-portal-backend-${{ inputs.stage }}:$application_version
