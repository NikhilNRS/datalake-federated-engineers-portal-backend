import { Construct } from 'constructs';
import {
    Aws,
    aws_iam as iam,
    aws_s3 as s3,
} from 'aws-cdk-lib';

import { Stage } from '@datalake/dl-utils';


interface FDEPolicyProps {
    stage: Stage;
    tagValue: string;
    roleName: string;
    athenaOutputBucket: s3.IBucket;
}

/**
* Represents a read policy for the Federated Engineers Portal.
* This policy grants permissions to perform read operations based on the maintainer tag value associated with respective AWS Resource
* @param stage - [dev / tst / acc / prd]
* @param tagValue - Maintainer tag value to be associated with policy
* @param roleName - CfnRole Name to which policies needs to be attached
*/

export class FDEAccPrdPolicy extends Construct {
    public readonly managedPolicies: iam.IManagedPolicy[];
    constructor(scope: Construct, id: string, props: FDEPolicyProps) {
        super(scope, id);

        const fdeAthenaReadPolicy = new iam.CfnManagedPolicy(this, 'fdeAthenaReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-athena-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "AllowViewAllBucketsS3Console",
                        "Action": ["s3:ListAllMyBuckets"],
                        "Resource": ["*"],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowAthenaOutputBucketAccess",
                        "Action": [
                            "s3:ListBucket",
                            "s3:GetBucketLocation",
                        ],
                        "Resource": [props.athenaOutputBucket.bucketArn],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowAthenaOutputBucketWriteAccessToLocation",
                        "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:DeleteObject",
                        ],
                        "Resource": [`${props.athenaOutputBucket.bucketArn}/${props.tagValue}/*`],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowDataAccessWithLakeformationPermissions",
                        "Action": [
                            "lakeformation:GetDataAccess",
                        ],
                        "Resource": ["*"],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowAthenaQueryExecution",
                        "Action": [
                            "athena:StartQueryExecution",
                            "athena:StopQueryExecution",
                            "athena:GetQueryExecution",
                            "athena:GetQueryResults",
                            "athena:GetWorkGroup",
                        ],
                        "Resource": [
                            `arn:aws:athena:*:${Aws.ACCOUNT_ID}:workgroup/primary`,
                            `arn:aws:athena:*:${Aws.ACCOUNT_ID}:datacatalog/*`,
                        ],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowGlueMetadataAccess",
                        "Action": [
                            "glue:GetDatabase",
                            "glue:GetDatabases",
                            "glue:GetTable",
                            "glue:GetTables",
                            "glue:GetPartition",
                            "glue:GetPartitions",
                            "glue:BatchGetPartition",
                        ],
                        "Resource": ["*"],
                        "Effect": iam.Effect.ALLOW,
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeLambdaReadPolicy = new iam.CfnManagedPolicy(this, 'fdeLambdaReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-lambda-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {   "Effect": "Allow",
                        "Sid": "LambdaListAccess",
                        "Action": [
                            "lambda:GetAccountSettings",
                            "lambda:ListEventSourceMappings",
                            "lambda:ListFunctions",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "LambdaTaggedResourcesRead",
                        "Action": [
                            "lambda:GetAlias",
                            "lambda:GetCodeSigningConfig",
                            "lambda:GetEventSourceMapping",
                            "lambda:GetFunction",
                            "lambda:GetFunctionCodeSigningConfig",
                            "lambda:GetFunctionConcurrency",
                            "lambda:GetFunctionConfiguration",
                            "lambda:GetFunctionEventInvokeConfig",
                            "lambda:GetFunctionUrlConfig",
                            "lambda:GetLayerVersion",
                            "lambda:GetLayerVersionPolicy",
                            "lambda:GetPolicy",
                            "lambda:GetProvisionedConcurrencyConfig",
                            "lambda:GetRuntimeManagementConfig",
                            "lambda:ListAliases",
                            "lambda:ListCodeSigningConfigs",
                            "lambda:ListEventSourceMappings",
                            "lambda:ListFunctionEventInvokeConfigs",
                            "lambda:ListFunctionUrlConfigs",
                            "lambda:ListFunctions",
                            "lambda:ListFunctionsByCodeSigningConfig",
                            "lambda:ListLayerVersions",
                            "lambda:ListLayers",
                            "lambda:ListProvisionedConcurrencyConfigs",
                            "lambda:ListTags",
                            "lambda:ListVersionsByFunction",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeStepFunctionReadPolicy = new iam.CfnManagedPolicy(this, 'fdeStepFunctionReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-step-function-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {   "Effect": "Allow",
                        "Sid": "StepFunctionListAccess",
                        "Action": [
                            "states:DescribeStateMachine",
                            "states:ListStateMachines",
                        ],
                        "Resource": "*",
                    },
                    {   "Effect": "Allow",
                        "Sid": "StepFunctionTaggedResourcesRead",
                        "Action": [
                            "states:DescribeActivity",
                            "states:DescribeExecution",
                            "states:DescribeMapRun",
                            "states:DescribeStateMachine",
                            "states:DescribeStateMachineAlias",
                            "states:DescribeStateMachineForExecution",
                            "states:GetExecutionHistory",
                            "states:ListActivities",
                            "states:ListExecutions",
                            "states:ListMapRuns",
                            "states:ListStateMachineAliases",
                            "states:ListStateMachineVersions",
                            "states:ListStateMachines",
                            "states:ListTagsForResource",
                            "states:ValidateStateMachineDefinition",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeGlueReadPolicy = new iam.CfnManagedPolicy(this, 'fdeGlueReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-glue-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "GlueListAccess",
                        "Action": [
                            "glue:GetClassifiers",
                            "glue:GetConnections",
                            "glue:GetCrawlers",
                            "glue:GetDatabases",
                            "glue:GetJobs",
                            "glue:GetMLTaskRuns",
                            "glue:GetMLTransforms",
                            "glue:GetTables",
                            "glue:GetTags",
                            "glue:GetTriggers",
                            "glue:ListBlueprints",
                            "glue:ListCrawlers",
                            "glue:ListCrawls",
                            "glue:ListCustomEntityTypes",
                            "glue:ListDataQualityResults",
                            "glue:ListDataQualityRuleRecommendationRuns",
                            "glue:ListDataQualityRulesetEvaluationRuns",
                            "glue:ListDataQualityRulesets",
                            "glue:ListDevEndpoints",
                            "glue:ListJobs",
                            "glue:ListMLTransforms",
                            "glue:ListRegistries",
                            "glue:ListSchemaVersions",
                            "glue:ListSchemas",
                            "glue:ListSessions",
                            "glue:ListStatements",
                            "glue:ListTableOptimizerRuns",
                            "glue:ListTriggers",
                            "glue:ListWorkflows",
                            "glue:QuerySchemaVersionMetadata",
                            "glue:SearchTables",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "GlueTaggedResourcesRead",
                        "Action": [
                            "glue:BatchGetBlueprints",
                            "glue:BatchGetCrawlers",
                            "glue:BatchGetCustomEntityTypes",
                            "glue:BatchGetDevEndpoints",
                            "glue:BatchGetJobs",
                            "glue:BatchGetPartition",
                            "glue:BatchGetTableOptimizer",
                            "glue:BatchGetTriggers",
                            "glue:BatchGetWorkflows",
                            "glue:CheckSchemaVersionValidity",
                            "glue:GetBlueprint",
                            "glue:GetBlueprintRun",
                            "glue:GetBlueprintRuns",
                            "glue:GetCatalogImportStatus",
                            "glue:GetClassifier",
                            "glue:GetClassifiers",
                            "glue:GetColumnStatisticsForPartition",
                            "glue:GetColumnStatisticsForTable",
                            "glue:GetColumnStatisticsTaskRun",
                            "glue:GetColumnStatisticsTaskRuns",
                            "glue:GetCompletion",
                            "glue:GetConnection",
                            "glue:GetConnections",
                            "glue:GetCrawler",
                            "glue:GetCrawlerMetrics",
                            "glue:GetCrawlers",
                            "glue:GetCustomEntityType",
                            "glue:GetDataCatalogEncryptionSettings",
                            "glue:GetDataQualityResult",
                            "glue:GetDataQualityRuleset",
                            "glue:GetDatabase",
                            "glue:GetDatabases",
                            "glue:GetDataflowGraph",
                            "glue:GetDevEndpoint",
                            "glue:GetDevEndpoints",
                            "glue:GetJob",
                            "glue:GetJobBookmark",
                            "glue:GetJobRun",
                            "glue:GetJobRuns",
                            "glue:GetJobs",
                            "glue:GetMLTaskRuns",
                            "glue:GetMLTransforms",
                            "glue:GetMapping",
                            "glue:GetPartition",
                            "glue:GetPartitionIndexes",
                            "glue:GetPartitions",
                            "glue:GetPlan",
                            "glue:GetRegistry",
                            "glue:GetResourcePolicies",
                            "glue:GetResourcePolicy",
                            "glue:GetSchema",
                            "glue:GetSchemaByDefinition",
                            "glue:GetSchemaVersion",
                            "glue:GetSchemaVersionsDiff",
                            "glue:GetSecurityConfiguration",
                            "glue:GetSecurityConfigurations",
                            "glue:GetSession",
                            "glue:GetStatement",
                            "glue:GetTable",
                            "glue:GetTableOptimizer",
                            "glue:GetTableVersion",
                            "glue:GetTableVersions",
                            "glue:GetTables",
                            "glue:GetTags",
                            "glue:GetTrigger",
                            "glue:GetTriggers",
                            "glue:GetUserDefinedFunction",
                            "glue:GetUserDefinedFunctions",
                            "glue:GetWorkflow",
                            "glue:GetWorkflowRun",
                            "glue:GetWorkflowRunProperties",
                            "glue:GetWorkflowRuns",
                            "glue:ListBlueprints",
                            "glue:ListColumnStatisticsTaskRuns",
                            "glue:ListCrawlers",
                            "glue:ListCrawls",
                            "glue:ListCustomEntityTypes",
                            "glue:ListDataQualityResults",
                            "glue:ListDataQualityRuleRecommendationRuns",
                            "glue:ListDataQualityRulesets",
                            "glue:ListDevEndpoints",
                            "glue:ListJobs",
                            "glue:ListMLTransforms",
                            "glue:ListRegistries",
                            "glue:ListSchemaVersions",
                            "glue:ListSchemas",
                            "glue:ListSessions",
                            "glue:ListStatements",
                            "glue:ListTableOptimizerRuns",
                            "glue:ListTriggers",
                            "glue:ListWorkflows",
                            "glue:QuerySchemaVersionMetadata",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "GlueS3ListBuckets",
                        "Action": "s3:ListAllMyBuckets",
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "GlueS3AssetBucketAccess",
                        "Action": [
                            "s3:Get*",
                            "s3:List*",
                        ],
                        "Resource": [
                            `arn:aws:s3:::cdk-hnb659fds-assets-${Aws.ACCOUNT_ID}-eu-west-1/*`,
                            `arn:aws:s3:::cdk-hnb659fds-assets-${Aws.ACCOUNT_ID}-eu-west-1`,
                            `arn:aws:s3:::postnl-dl-${props.stage}-shared-glue-etl-utilities/*`,
                            `arn:aws:s3:::postnl-dl-${props.stage}-shared-glue-etl-utilities`,
                        ],
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeCloudformationReadPolicy = new iam.CfnManagedPolicy(this, 'fdeCloudformationReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-cloudformation-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "CloudformationListAccess",
                        "Action": [
                            "cloudformation:DescribeStacks",
                            "cloudformation:ListChangeSets",
                            "cloudformation:ListExports",
                            "cloudformation:ListGeneratedTemplates",
                            "cloudformation:ListImports",
                            "cloudformation:ListResourceScanRelatedResources",
                            "cloudformation:ListResourceScanResources",
                            "cloudformation:ListResourceScans",
                            "cloudformation:ListStackInstanceResourceDrifts",
                            "cloudformation:ListStackInstances",
                            "cloudformation:ListStackResources",
                            "cloudformation:ListStackSetAutoDeploymentTargets",
                            "cloudformation:ListStackSetOperationResults",
                            "cloudformation:ListStackSetOperations",
                            "cloudformation:ListStackSets",
                            "cloudformation:ListStacks",
                            "cloudformation:ListTypeRegistrations",
                            "cloudformation:ListTypeVersions",
                            "cloudformation:ListTypes",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "CloudformationTaggedResourcesRead",
                        "Action": [
                            "cloudformation:BatchDescribeTypeConfigurations",
                            "cloudformation:DescribeAccountLimits",
                            "cloudformation:DescribeChangeSet",
                            "cloudformation:DescribeChangeSetHooks",
                            "cloudformation:DescribeGeneratedTemplate",
                            "cloudformation:DescribeOrganizationsAccess",
                            "cloudformation:DescribePublisher",
                            "cloudformation:DescribeResourceScan",
                            "cloudformation:DescribeStackDriftDetectionStatus",
                            "cloudformation:DescribeStackEvents",
                            "cloudformation:DescribeStackInstance",
                            "cloudformation:DescribeStackResource",
                            "cloudformation:DescribeStackResourceDrifts",
                            "cloudformation:DescribeStackResources",
                            "cloudformation:DescribeStackSet",
                            "cloudformation:DescribeStackSetOperation",
                            "cloudformation:DescribeStacks",
                            "cloudformation:DescribeType",
                            "cloudformation:DescribeTypeRegistration",
                            "cloudformation:DetectStackDrift",
                            "cloudformation:DetectStackResourceDrift",
                            "cloudformation:DetectStackSetDrift",
                            "cloudformation:EstimateTemplateCost",
                            "cloudformation:GetGeneratedTemplate",
                            "cloudformation:GetStackPolicy",
                            "cloudformation:GetTemplate",
                            "cloudformation:GetTemplateSummary",
                            "cloudformation:ListChangeSets",
                            "cloudformation:ListExports",
                            "cloudformation:ListGeneratedTemplates",
                            "cloudformation:ListImports",
                            "cloudformation:ListResourceScanRelatedResources",
                            "cloudformation:ListResourceScanResources",
                            "cloudformation:ListResourceScans",
                            "cloudformation:ListStackInstanceResourceDrifts",
                            "cloudformation:ListStackInstances",
                            "cloudformation:ListStackResources",
                            "cloudformation:ListStackSetAutoDeploymentTargets",
                            "cloudformation:ListStackSetOperationResults",
                            "cloudformation:ListStackSetOperations",
                            "cloudformation:ListStackSets",
                            "cloudformation:ListStacks",
                            "cloudformation:ListTypeRegistrations",
                            "cloudformation:ListTypeVersions",
                            "cloudformation:ListTypes",
                            "cloudformation:ValidateTemplate",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeSNSReadPolicy = new iam.CfnManagedPolicy(this, 'fdeSNSReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-sns-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "SNSListAccess",
                        "Action": [
                            "sns:ListEndpointsByPlatformApplication",
                            "sns:ListPlatformApplications",
                            "sns:ListSubscriptions",
                            "sns:ListSubscriptionsByTopic",
                            "sns:ListTopics",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "SNSTaggedResourcesRead",
                        "Action": [
                            "sns:CheckIfPhoneNumberIsOptedOut",
                            "sns:GetDataProtectionPolicy",
                            "sns:GetEndpointAttributes",
                            "sns:GetPlatformApplicationAttributes",
                            "sns:GetSMSAttributes",
                            "sns:GetSMSSandboxAccountStatus",
                            "sns:GetSubscriptionAttributes",
                            "sns:GetTopicAttributes",
                            "sns:ListEndpointsByPlatformApplication",
                            "sns:ListOriginationNumbers",
                            "sns:ListPhoneNumbersOptedOut",
                            "sns:ListPlatformApplications",
                            "sns:ListSMSSandboxPhoneNumbers",
                            "sns:ListSubscriptions",
                            "sns:ListSubscriptionsByTopic",
                            "sns:ListTagsForResource",
                            "sns:ListTopics",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeSQSReadPolicy = new iam.CfnManagedPolicy(this, 'fdeSQSReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-sqs-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "SQSListAccess",
                        "Action": "sqs:ListQueues",
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "SQSTaggedResourcesRead",
                        "Action": [
                            "sqs:GetQueueAttributes",
                            "sqs:GetQueueUrl",
                            "sqs:ListDeadLetterSourceQueues",
                            "sqs:ListMessageMoveTasks",
                            "sqs:ListQueueTags",
                            "sqs:ListQueues",
                            "sqs:ReceiveMessage",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdePipesReadPolicy = new iam.CfnManagedPolicy(this, 'fdePipesReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-pipes-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "PipesListAccess",
                        "Action": "pipes:ListPipes",
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "PipesTaggedResourcesRead",
                        "Action": [
                            "pipes:DescribePipe",
                            "pipes:ListPipes",
                            "pipes:ListTagsForResource",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeCloudwatchLogsReadPolicy = new iam.CfnManagedPolicy(this, 'fdeCloudwatchLogsReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-cloudwatch-logs-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "CloudwatchLogsList",
                        "Action": [
                            "logs:DescribeAccountPolicies",
                            "logs:DescribeDeliveries",
                            "logs:DescribeDeliveryDestinations",
                            "logs:DescribeDeliverySources",
                            "logs:DescribeDestinations",
                            "logs:DescribeExportTasks",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams",
                            "logs:DescribeMetricFilters",
                            "logs:DescribeQueries",
                            "logs:DescribeQueryDefinitions",
                            "logs:DescribeResourcePolicies",
                            "logs:DescribeSubscriptionFilters",
                            "logs:GetLogDelivery",
                            "logs:ListAnomalies",
                            "logs:ListLogAnomalyDetectors",
                            "logs:ListLogDeliveries",
                            "logs:ListTagsForResource",
                            "logs:ListTagsLogGroup",
                            "logs:StopLiveTail",
                            "logs:StopQuery",
                            "logs:TestMetricFilter",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "CloudwatchLogsLoggroupRead",
                        "Action": [
                            "logs:DescribeAccountPolicies",
                            "logs:DescribeDeliveries",
                            "logs:DescribeDeliveryDestinations",
                            "logs:DescribeDeliverySources",
                            "logs:DescribeDestinations",
                            "logs:DescribeExportTasks",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams",
                            "logs:DescribeMetricFilters",
                            "logs:DescribeQueries",
                            "logs:DescribeQueryDefinitions",
                            "logs:DescribeResourcePolicies",
                            "logs:DescribeSubscriptionFilters",
                            "logs:FilterLogEvents",
                            "logs:GetDataProtectionPolicy",
                            "logs:GetDelivery",
                            "logs:GetDeliveryDestination",
                            "logs:GetDeliveryDestinationPolicy",
                            "logs:GetDeliverySource",
                            "logs:GetLogAnomalyDetector",
                            "logs:GetLogDelivery",
                            "logs:GetLogEvents",
                            "logs:GetLogGroupFields",
                            "logs:GetLogRecord",
                            "logs:GetQueryResults",
                            "logs:ListAnomalies",
                            "logs:ListLogAnomalyDetectors",
                            "logs:ListLogDeliveries",
                            "logs:ListTagsForResource",
                            "logs:ListTagsLogGroup",
                            "logs:StartLiveTail",
                            "logs:StartQuery",
                            "logs:StopLiveTail",
                            "logs:StopQuery",
                            "logs:TestMetricFilter",
                            "logs:Unmask",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeSystemsManagerReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdeSystemsManagerReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-systems-manager-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "ssmDocumentReadMaintainedDocuments",
                        "Effect": "Allow",
                        "Action": [
                            "ssm:ListDocumentVersions",
                            "ssm:DescribeDocument",
                            "ssm:GetDocument",
                        ],
                        "Resource": `arn:aws:ssm:eu-west-1:${Aws.ACCOUNT_ID}:document/*`,
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                    {
                        "Sid": "ssmListAllDocumentsAndAutomations",
                        "Effect": "Allow",
                        "Action": [
                            "ssm:DescribeAutomationExecutions",
                            "ssm:ListDocuments",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Sid": "ssmStartMaintainedAutomation",
                        "Effect": "Allow",
                        "Action": "ssm:StartAutomationExecution",
                        "Resource": `arn:aws:ssm:eu-west-1:${Aws.ACCOUNT_ID}:automation-definition/${props.tagValue}*:*`,
                    },
                    {
                        "Sid": "ssmGetAllAutomationExecutions",
                        "Effect": "Allow",
                        "Action": [
                            "ssm:GetAutomationExecution",
                            "ssm:DescribeAutomationStepExecutions",
                            "ssm:DescribeAutomationExecutions",
                        ],
                        "Resource": `arn:aws:ssm:eu-west-1:${Aws.ACCOUNT_ID}:automation-execution/*`,
                    },
                ],
            },
            roles: [props.roleName],
        });

    }
}



/**
* Represents a read and write policy for the Federated Engineers Portal.
* This policy grants permissions to perform read/write(invoke resource) operations based on the maintainer tag value associated with respective AWS Resource
* @param stage - [dev / tst / acc / prd]
* @param tagValue - Maintainer tag value to be associated with policy
* @param roleName - CfnRole Name to which policies needs to be attached
*/

export class FDEDevTstPolicy extends Construct {
    public readonly managedPolicies: iam.IManagedPolicy[];
    constructor(scope: Construct, id: string, props: FDEPolicyProps) {
        super(scope, id);

        const fdeAthenaWritePolicy = new iam.CfnManagedPolicy(this, 'fdeAthenaWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-athena-policy-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "AllowViewAllBucketsS3Console",
                        "Action": ["s3:ListAllMyBuckets"],
                        "Resource": ["*"],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowAthenaOutputBucketAccess",
                        "Action": [
                            "s3:ListBucket",
                            "s3:GetBucketLocation",
                        ],
                        "Resource": [props.athenaOutputBucket.bucketArn],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowAthenaOutputBucketWriteAccessToLocation",
                        "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:DeleteObject",
                        ],
                        "Resource": [`${props.athenaOutputBucket.bucketArn}/${props.tagValue}/*`],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowDataAccessWithLakeformationPermissions",
                        "Action": [
                            "lakeformation:GetDataAccess",
                        ],
                        "Resource": ["*"],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowAthenaQueryExecution",
                        "Action": [
                            "athena:StartQueryExecution",
                            "athena:StopQueryExecution",
                            "athena:GetQueryExecution",
                            "athena:GetQueryResults",
                            "athena:GetWorkGroup",
                        ],
                        "Resource": [
                            `arn:aws:athena:*:${Aws.ACCOUNT_ID}:workgroup/primary`,
                            `arn:aws:athena:*:${Aws.ACCOUNT_ID}:datacatalog/*`,
                        ],
                        "Effect": iam.Effect.ALLOW,
                    },
                    {
                        "Sid": "AllowGlueMetadataAccess",
                        "Action": [
                            "glue:GetDatabase",
                            "glue:GetDatabases",
                            "glue:GetTable",
                            "glue:GetTables",
                            "glue:GetPartition",
                            "glue:GetPartitions",
                            "glue:BatchGetPartition",
                        ],
                        "Resource": ["*"],
                        "Effect": iam.Effect.ALLOW,
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeLambdaReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdeLambdaReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-lambda-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {   "Effect": "Allow",
                        "Sid": "LambdaListAccess",
                        "Action": [
                            "lambda:GetAccountSettings",
                            "lambda:ListEventSourceMappings",
                            "lambda:ListFunctions",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "LambdaTaggedResourcesReadWrite",
                        "Action": [
                            "lambda:AddLayerVersionPermission",
                            "lambda:AddPermission",
                            "lambda:CreateAlias",
                            "lambda:CreateCodeSigningConfig",
                            "lambda:CreateEventSourceMapping",
                            "lambda:CreateFunctionUrlConfig",
                            "lambda:DisableReplication",
                            "lambda:EnableReplication",
                            "lambda:GetAlias",
                            "lambda:GetCodeSigningConfig",
                            "lambda:GetEventSourceMapping",
                            "lambda:GetFunction",
                            "lambda:GetFunctionCodeSigningConfig",
                            "lambda:GetFunctionConcurrency",
                            "lambda:GetFunctionConfiguration",
                            "lambda:GetFunctionEventInvokeConfig",
                            "lambda:GetFunctionUrlConfig",
                            "lambda:GetLayerVersion",
                            "lambda:GetLayerVersionPolicy",
                            "lambda:GetPolicy",
                            "lambda:GetProvisionedConcurrencyConfig",
                            "lambda:GetRuntimeManagementConfig",
                            "lambda:InvokeAsync",
                            "lambda:InvokeFunction",
                            "lambda:InvokeFunctionUrl",
                            "lambda:ListAliases",
                            "lambda:ListCodeSigningConfigs",
                            "lambda:ListEventSourceMappings",
                            "lambda:ListFunctionEventInvokeConfigs",
                            "lambda:ListFunctionUrlConfigs",
                            "lambda:ListFunctions",
                            "lambda:ListFunctionsByCodeSigningConfig",
                            "lambda:ListLayerVersions",
                            "lambda:ListLayers",
                            "lambda:ListProvisionedConcurrencyConfigs",
                            "lambda:ListTags",
                            "lambda:ListVersionsByFunction",
                            "lambda:PublishLayerVersion",
                            "lambda:PublishVersion",
                            "lambda:PutFunctionCodeSigningConfig",
                            "lambda:PutFunctionConcurrency",
                            "lambda:PutFunctionEventInvokeConfig",
                            "lambda:PutProvisionedConcurrencyConfig",
                            "lambda:PutRuntimeManagementConfig",
                            "lambda:RemoveLayerVersionPermission",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeStepFunctionReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdeStepFunctionReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-step-function-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {   "Effect": "Allow",
                        "Sid": "StepFunctionListAccess",
                        "Action": [
                            "states:DescribeStateMachine",
                            "states:ListStateMachines",
                        ],
                        "Resource": "*",
                    },
                    {   "Effect": "Allow",
                        "Sid": "StepFunctionTaggedResourcesReadWrite",
                        "Action": [
                            "states:CreateActivity",
                            "states:DescribeActivity",
                            "states:DescribeExecution",
                            "states:DescribeMapRun",
                            "states:DescribeStateMachine",
                            "states:DescribeStateMachineAlias",
                            "states:DescribeStateMachineForExecution",
                            "states:GetActivityTask",
                            "states:GetExecutionHistory",
                            "states:InvokeHTTPEndpoint",
                            "states:ListActivities",
                            "states:ListExecutions",
                            "states:ListMapRuns",
                            "states:ListStateMachineAliases",
                            "states:ListStateMachineVersions",
                            "states:ListStateMachines",
                            "states:ListTagsForResource",
                            "states:PublishStateMachineVersion",
                            "states:RedriveExecution",
                            "states:SendTaskFailure",
                            "states:SendTaskHeartbeat",
                            "states:SendTaskSuccess",
                            "states:StartExecution",
                            "states:StartSyncExecution",
                            "states:StopExecution",
                            "states:TestState",
                            "states:UpdateMapRun",
                            "states:ValidateStateMachineDefinition",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeGlueReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdeGlueReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-glue-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "GlueListAccess",
                        "Action": [
                            "glue:GetClassifiers",
                            "glue:GetConnections",
                            "glue:GetCrawlers",
                            "glue:GetDatabases",
                            "glue:GetJobs",
                            "glue:GetMLTaskRuns",
                            "glue:GetMLTransforms",
                            "glue:GetTables",
                            "glue:GetTags",
                            "glue:GetTriggers",
                            "glue:ListBlueprints",
                            "glue:ListCrawlers",
                            "glue:ListCrawls",
                            "glue:ListCustomEntityTypes",
                            "glue:ListDataQualityResults",
                            "glue:ListDataQualityRuleRecommendationRuns",
                            "glue:ListDataQualityRulesetEvaluationRuns",
                            "glue:ListDataQualityRulesets",
                            "glue:ListDevEndpoints",
                            "glue:ListJobs",
                            "glue:ListMLTransforms",
                            "glue:ListRegistries",
                            "glue:ListSchemaVersions",
                            "glue:ListSchemas",
                            "glue:ListSessions",
                            "glue:ListStatements",
                            "glue:ListTableOptimizerRuns",
                            "glue:ListTriggers",
                            "glue:ListWorkflows",
                            "glue:QuerySchemaVersionMetadata",
                            "glue:SearchTables",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "GlueTaggedResourcesReadWrite",
                        "Action": [
                            "glue:BatchCreatePartition",
                            "glue:BatchGetBlueprints",
                            "glue:BatchGetCrawlers",
                            "glue:BatchGetCustomEntityTypes",
                            "glue:BatchGetDevEndpoints",
                            "glue:BatchGetJobs",
                            "glue:BatchGetPartition",
                            "glue:BatchGetTableOptimizer",
                            "glue:BatchGetTriggers",
                            "glue:BatchGetWorkflows",
                            "glue:BatchStopJobRun",
                            "glue:BatchUpdatePartition",
                            "glue:CancelStatement",
                            "glue:CheckSchemaVersionValidity",
                            "glue:DeleteSession",
                            "glue:GetBlueprint",
                            "glue:GetBlueprintRun",
                            "glue:GetBlueprintRuns",
                            "glue:GetCatalogImportStatus",
                            "glue:GetClassifier",
                            "glue:GetClassifiers",
                            "glue:GetColumnStatisticsForPartition",
                            "glue:GetColumnStatisticsForTable",
                            "glue:GetColumnStatisticsTaskRun",
                            "glue:GetColumnStatisticsTaskRuns",
                            "glue:GetCompletion",
                            "glue:GetConnection",
                            "glue:GetConnections",
                            "glue:GetCrawler",
                            "glue:GetCrawlerMetrics",
                            "glue:GetCrawlers",
                            "glue:GetCustomEntityType",
                            "glue:GetDataCatalogEncryptionSettings",
                            "glue:GetDataQualityModel",
                            "glue:GetDataQualityModelResult",
                            "glue:GetDataQualityResult",
                            "glue:GetDataQualityRuleRecommendationRun",
                            "glue:GetDataQualityRuleset",
                            "glue:GetDataQualityRulesetEvaluationRun",
                            "glue:GetDatabase",
                            "glue:GetDatabases",
                            "glue:GetDataflowGraph",
                            "glue:GetDevEndpoint",
                            "glue:GetDevEndpoints",
                            "glue:GetJob",
                            "glue:GetJobBookmark",
                            "glue:GetJobRun",
                            "glue:GetJobRuns",
                            "glue:GetJobs",
                            "glue:GetMLTaskRun",
                            "glue:GetMLTaskRuns",
                            "glue:GetMLTransform",
                            "glue:GetMLTransforms",
                            "glue:GetMapping",
                            "glue:GetPartition",
                            "glue:GetPartitionIndexes",
                            "glue:GetPartitions",
                            "glue:GetPlan",
                            "glue:GetRegistry",
                            "glue:GetResourcePolicies",
                            "glue:GetResourcePolicy",
                            "glue:GetSchema",
                            "glue:GetSchemaByDefinition",
                            "glue:GetSchemaVersion",
                            "glue:GetSchemaVersionsDiff",
                            "glue:GetSecurityConfiguration",
                            "glue:GetSecurityConfigurations",
                            "glue:GetSession",
                            "glue:GetStatement",
                            "glue:GetTable",
                            "glue:GetTableOptimizer",
                            "glue:GetTableVersion",
                            "glue:GetTableVersions",
                            "glue:GetTables",
                            "glue:GetTags",
                            "glue:GetTrigger",
                            "glue:GetTriggers",
                            "glue:GetUserDefinedFunction",
                            "glue:GetUserDefinedFunctions",
                            "glue:GetWorkflow",
                            "glue:GetWorkflowRun",
                            "glue:GetWorkflowRunProperties",
                            "glue:GetWorkflowRuns",
                            "glue:ImportCatalogToGlue",
                            "glue:ListBlueprints",
                            "glue:ListColumnStatisticsTaskRuns",
                            "glue:ListCrawlers",
                            "glue:ListCrawls",
                            "glue:ListCustomEntityTypes",
                            "glue:ListDataQualityResults",
                            "glue:ListDataQualityRuleRecommendationRuns",
                            "glue:ListDataQualityRulesetEvaluationRuns",
                            "glue:ListDataQualityRulesets",
                            "glue:ListDevEndpoints",
                            "glue:ListJobs",
                            "glue:ListMLTransforms",
                            "glue:ListRegistries",
                            "glue:ListSchemaVersions",
                            "glue:ListSchemas",
                            "glue:ListSessions",
                            "glue:ListStatements",
                            "glue:ListTableOptimizerRuns",
                            "glue:ListTriggers",
                            "glue:ListWorkflows",
                            "glue:NotifyEvent",
                            "glue:PassConnection",
                            "glue:PublishDataQuality",
                            "glue:PutDataCatalogEncryptionSettings",
                            "glue:PutSchemaVersionMetadata",
                            "glue:PutWorkflowRunProperties",
                            "glue:QuerySchemaVersionMetadata",
                            "glue:RegisterSchemaVersion",
                            "glue:RemoveSchemaVersionMetadata",
                            "glue:ResetJobBookmark",
                            "glue:ResumeWorkflowRun",
                            "glue:RunStatement",
                            "glue:SendFeedback",
                            "glue:StartColumnStatisticsTaskRun",
                            "glue:StartCompletion",
                            "glue:StartCrawler",
                            "glue:StartCrawlerSchedule",
                            "glue:StartExportLabelsTaskRun",
                            "glue:StartImportLabelsTaskRun",
                            "glue:StartJobRun",
                            "glue:StartMLEvaluationTaskRun",
                            "glue:StartMLLabelingSetGenerationTaskRun",
                            "glue:StartTrigger",
                            "glue:StartWorkflowRun",
                            "glue:StopColumnStatisticsTaskRun",
                            "glue:StopCrawler",
                            "glue:StopCrawlerSchedule",
                            "glue:StopSession",
                            "glue:StopTrigger",
                            "glue:StopWorkflowRun",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "GlueS3ListBuckets",
                        "Action": "s3:ListAllMyBuckets",
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "GlueS3AssetBucketAccess",
                        "Action": [
                            "s3:Get*",
                            "s3:List*",
                        ],
                        "Resource": [
                            `arn:aws:s3:::cdk-hnb659fds-assets-${Aws.ACCOUNT_ID}-eu-west-1/*`,
                            `arn:aws:s3:::cdk-hnb659fds-assets-${Aws.ACCOUNT_ID}-eu-west-1`,
                            `arn:aws:s3:::postnl-dl-${props.stage}-shared-glue-etl-utilities/*`,
                            `arn:aws:s3:::postnl-dl-${props.stage}-shared-glue-etl-utilities`,
                        ],
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeCloudformationReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdeCloudformationReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-cloudformation-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "CloudformationListAccess",
                        "Action": [
                            "cloudformation:DescribeStacks",
                            "cloudformation:ListChangeSets",
                            "cloudformation:ListExports",
                            "cloudformation:ListGeneratedTemplates",
                            "cloudformation:ListImports",
                            "cloudformation:ListResourceScanRelatedResources",
                            "cloudformation:ListResourceScanResources",
                            "cloudformation:ListResourceScans",
                            "cloudformation:ListStackInstanceResourceDrifts",
                            "cloudformation:ListStackInstances",
                            "cloudformation:ListStackResources",
                            "cloudformation:ListStackSetAutoDeploymentTargets",
                            "cloudformation:ListStackSetOperationResults",
                            "cloudformation:ListStackSetOperations",
                            "cloudformation:ListStackSets",
                            "cloudformation:ListStacks",
                            "cloudformation:ListTypeRegistrations",
                            "cloudformation:ListTypeVersions",
                            "cloudformation:ListTypes",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "CloudformationTaggedResourcesReadWrite",
                        "Action": [
                            "cloudformation:BatchDescribeTypeConfigurations",
                            "cloudformation:DeleteChangeSet",
                            "cloudformation:DeleteGeneratedTemplate",
                            "cloudformation:DeleteStack",
                            "cloudformation:DeleteStackInstances",
                            "cloudformation:DeleteStackSet",
                            "cloudformation:DeregisterType",
                            "cloudformation:DescribeAccountLimits",
                            "cloudformation:DescribeChangeSet",
                            "cloudformation:DescribeChangeSetHooks",
                            "cloudformation:DescribeGeneratedTemplate",
                            "cloudformation:DescribeOrganizationsAccess",
                            "cloudformation:DescribePublisher",
                            "cloudformation:DescribeResourceScan",
                            "cloudformation:DescribeStackDriftDetectionStatus",
                            "cloudformation:DescribeStackEvents",
                            "cloudformation:DescribeStackInstance",
                            "cloudformation:DescribeStackResource",
                            "cloudformation:DescribeStackResourceDrifts",
                            "cloudformation:DescribeStackResources",
                            "cloudformation:DescribeStackSet",
                            "cloudformation:DescribeStackSetOperation",
                            "cloudformation:DescribeStacks",
                            "cloudformation:DescribeType",
                            "cloudformation:DescribeTypeRegistration",
                            "cloudformation:DetectStackDrift",
                            "cloudformation:DetectStackResourceDrift",
                            "cloudformation:DetectStackSetDrift",
                            "cloudformation:EstimateTemplateCost",
                            "cloudformation:GetGeneratedTemplate",
                            "cloudformation:GetStackPolicy",
                            "cloudformation:GetTemplate",
                            "cloudformation:GetTemplateSummary",
                            "cloudformation:ListChangeSets",
                            "cloudformation:ListExports",
                            "cloudformation:ListGeneratedTemplates",
                            "cloudformation:ListImports",
                            "cloudformation:ListResourceScanRelatedResources",
                            "cloudformation:ListResourceScanResources",
                            "cloudformation:ListResourceScans",
                            "cloudformation:ListStackInstanceResourceDrifts",
                            "cloudformation:ListStackInstances",
                            "cloudformation:ListStackResources",
                            "cloudformation:ListStackSetAutoDeploymentTargets",
                            "cloudformation:ListStackSetOperationResults",
                            "cloudformation:ListStackSetOperations",
                            "cloudformation:ListStackSets",
                            "cloudformation:ListStacks",
                            "cloudformation:ListTypeRegistrations",
                            "cloudformation:ListTypeVersions",
                            "cloudformation:ListTypes",
                            "cloudformation:RollbackStack",
                            "cloudformation:SetTypeConfiguration",
                            "cloudformation:SetTypeDefaultVersion",
                            "cloudformation:SignalResource",
                            "cloudformation:StartResourceScan",
                            "cloudformation:StopStackSetOperation",
                            "cloudformation:TestType",
                            "cloudformation:ValidateTemplate",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeSNSReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdeSNSReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-sns-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "SNSListAccess",
                        "Action": [
                            "sns:ListEndpointsByPlatformApplication",
                            "sns:ListPlatformApplications",
                            "sns:ListSubscriptions",
                            "sns:ListSubscriptionsByTopic",
                            "sns:ListTopics",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "SNSTaggedResourcesReadWrite",
                        "Action": [
                            "sns:CheckIfPhoneNumberIsOptedOut",
                            "sns:ConfirmSubscription",
                            "sns:GetDataProtectionPolicy",
                            "sns:GetEndpointAttributes",
                            "sns:GetPlatformApplicationAttributes",
                            "sns:GetSMSAttributes",
                            "sns:GetSMSSandboxAccountStatus",
                            "sns:GetSubscriptionAttributes",
                            "sns:GetTopicAttributes",
                            "sns:ListEndpointsByPlatformApplication",
                            "sns:ListOriginationNumbers",
                            "sns:ListPhoneNumbersOptedOut",
                            "sns:ListPlatformApplications",
                            "sns:ListSMSSandboxPhoneNumbers",
                            "sns:ListSubscriptions",
                            "sns:ListSubscriptionsByTopic",
                            "sns:ListTagsForResource",
                            "sns:ListTopics",
                            "sns:OptInPhoneNumber",
                            "sns:Publish",
                            "sns:PutDataProtectionPolicy",
                            "sns:SetEndpointAttributes",
                            "sns:SetSMSAttributes",
                            "sns:SetSubscriptionAttributes",
                            "sns:Subscribe",
                            "sns:Unsubscribe",
                            "sns:VerifySMSSandboxPhoneNumber",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeSQSReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdeSQSReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-sqs-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "SQSListAccess",
                        "Action": "sqs:ListQueues",
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "SQSTaggedResourcesReadWrite",
                        "Action": [
                            "sqs:CancelMessageMoveTask",
                            "sqs:ChangeMessageVisibility",
                            "sqs:DeleteMessage",
                            "sqs:GetQueueAttributes",
                            "sqs:GetQueueUrl",
                            "sqs:ListDeadLetterSourceQueues",
                            "sqs:ListMessageMoveTasks",
                            "sqs:ListQueueTags",
                            "sqs:ListQueues",
                            "sqs:PurgeQueue",
                            "sqs:ReceiveMessage",
                            "sqs:SendMessage",
                            "sqs:SetQueueAttributes",
                            "sqs:StartMessageMoveTask",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdePipesReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdePipesReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-pipes-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "PipesListAccess",
                        "Action": "pipes:ListPipes",
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "PipesTaggedResourcesReadWrite",
                        "Action": [
                            "pipes:DescribePipe",
                            "pipes:ListPipes",
                            "pipes:ListTagsForResource",
                            "pipes:StartPipe",
                            "pipes:StopPipe",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeCloudwatchLogsReadPolicy = new iam.CfnManagedPolicy(this, 'fdeCloudwatchLogsReadPolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-cloudwatch-logs-policy-read`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Sid": "CloudwatchLogsList",
                        "Action": [
                            "logs:DescribeAccountPolicies",
                            "logs:DescribeDeliveries",
                            "logs:DescribeDeliveryDestinations",
                            "logs:DescribeDeliverySources",
                            "logs:DescribeDestinations",
                            "logs:DescribeExportTasks",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams",
                            "logs:DescribeMetricFilters",
                            "logs:DescribeQueries",
                            "logs:DescribeQueryDefinitions",
                            "logs:DescribeResourcePolicies",
                            "logs:DescribeSubscriptionFilters",
                            "logs:GetLogDelivery",
                            "logs:ListAnomalies",
                            "logs:ListLogAnomalyDetectors",
                            "logs:ListLogDeliveries",
                            "logs:ListTagsForResource",
                            "logs:ListTagsLogGroup",
                            "logs:StopLiveTail",
                            "logs:StopQuery",
                            "logs:TestMetricFilter",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Effect": "Allow",
                        "Sid": "CloudwatchLogsLoggroupRead",
                        "Action": [
                            "logs:DescribeAccountPolicies",
                            "logs:DescribeDeliveries",
                            "logs:DescribeDeliveryDestinations",
                            "logs:DescribeDeliverySources",
                            "logs:DescribeDestinations",
                            "logs:DescribeExportTasks",
                            "logs:DescribeLogGroups",
                            "logs:DescribeLogStreams",
                            "logs:DescribeMetricFilters",
                            "logs:DescribeQueries",
                            "logs:DescribeQueryDefinitions",
                            "logs:DescribeResourcePolicies",
                            "logs:DescribeSubscriptionFilters",
                            "logs:FilterLogEvents",
                            "logs:GetDataProtectionPolicy",
                            "logs:GetDelivery",
                            "logs:GetDeliveryDestination",
                            "logs:GetDeliveryDestinationPolicy",
                            "logs:GetDeliverySource",
                            "logs:GetLogAnomalyDetector",
                            "logs:GetLogDelivery",
                            "logs:GetLogEvents",
                            "logs:GetLogGroupFields",
                            "logs:GetLogRecord",
                            "logs:GetQueryResults",
                            "logs:ListAnomalies",
                            "logs:ListLogAnomalyDetectors",
                            "logs:ListLogDeliveries",
                            "logs:ListTagsForResource",
                            "logs:ListTagsLogGroup",
                            "logs:StartLiveTail",
                            "logs:StartQuery",
                            "logs:StopLiveTail",
                            "logs:StopQuery",
                            "logs:TestMetricFilter",
                            "logs:Unmask",
                        ],
                        "Resource": "*",
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                ],
            },
            roles: [props.roleName],
        });

        const fdeSystemsManagerReadWritePolicy = new iam.CfnManagedPolicy(this, 'fdeSystemsManagerReadWritePolicy', {
            managedPolicyName: `${props.stage}-fde-${props.tagValue}-systems-manager-policy-read-write`,
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "ssmDocumentReadMaintainedDocuments",
                        "Effect": "Allow",
                        "Action": [
                            "ssm:ListDocumentVersions",
                            "ssm:DescribeDocument",
                            "ssm:GetDocument",
                        ],
                        "Resource": `arn:aws:ssm:eu-west-1:${Aws.ACCOUNT_ID}:document/*`,
                        "Condition": {
                            "ForAnyValue:StringEquals": {
                                "aws:ResourceTag/maintainer": `${props.tagValue}`,
                            },
                        },
                    },
                    {
                        "Sid": "ssmListAllDocumentsAndAutomations",
                        "Effect": "Allow",
                        "Action": [
                            "ssm:DescribeAutomationExecutions",
                            "ssm:ListDocuments",
                        ],
                        "Resource": "*",
                    },
                    {
                        "Sid": "ssmStartMaintainedAutomation",
                        "Effect": "Allow",
                        "Action": "ssm:StartAutomationExecution",
                        "Resource": `arn:aws:ssm:eu-west-1:${Aws.ACCOUNT_ID}:automation-definition/${props.tagValue}*:*`,
                    },
                    {
                        "Sid": "ssmGetAllAutomationExecutions",
                        "Effect": "Allow",
                        "Action": [
                            "ssm:GetAutomationExecution",
                            "ssm:DescribeAutomationStepExecutions",
                            "ssm:DescribeAutomationExecutions",
                        ],
                        "Resource": `arn:aws:ssm:eu-west-1:${Aws.ACCOUNT_ID}:automation-execution/*`,
                    },
                ],
            },
            roles: [props.roleName],
        });
    }
}
